#
# Copyright 2025 agwlvssainokuni
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test before release
  test:
    name: Pre-release Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run all tests
        run: ./gradlew check --no-daemon
        env:
          GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx2g -Dorg.gradle.daemon=false"

  # Build release artifacts
  build:
    name: Build Release
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 20

    outputs:
      version: ${{ steps.version.outputs.version }}
      war-name: ${{ steps.build.outputs.war-name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION}"

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build application
        id: build
        run: |
          ./gradlew build --no-daemon
          WAR_NAME=$(ls build/libs/*.war | xargs basename)
          echo "war-name=${WAR_NAME}" >> $GITHUB_OUTPUT
          echo "Built WAR: ${WAR_NAME}"
        env:
          GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx2g -Dorg.gradle.daemon=false"

      - name: Upload WAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-war
          path: build/libs/*.war
          retention-days: 90

  # Build and push Docker image
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download WAR artifact
        uses: actions/download-artifact@v4
        with:
          name: release-war
          path: build/libs/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=${{ needs.build.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Create GitHub release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download WAR artifact
        uses: actions/download-artifact@v4
        with:
          name: release-war
          path: artifacts/

      - name: Generate changelog
        id: changelog
        run: |
          echo "## ðŸš€ What's New" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "### Changes since ${LAST_TAG}" >> CHANGELOG.md
            git log --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD >> CHANGELOG.md
          else
            echo "### Initial Release" >> CHANGELOG.md
            echo "- Initial release of SqlApp2" >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "## ðŸ“¦ Assets" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "- \`${{ needs.build.outputs.war-name }}\` - Standalone WAR file" >> CHANGELOG.md
          echo "- Docker image: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}\`" >> CHANGELOG.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.version }}
          name: Release ${{ needs.build.outputs.version }}
          body_path: CHANGELOG.md
          files: |
            artifacts/*.war
          draft: false
          prerelease: false
          generate_release_notes: true

  # Deploy to production (if needed)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker, release]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    environment: production
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying version ${{ needs.build.outputs.version }} to production..."
          echo "Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}"
          echo "WAR file: ${{ needs.build.outputs.war-name }}"
          
          # Add actual deployment commands here
          # Example:
          # - Update Kubernetes deployment
          # - Deploy to cloud provider
          # - Update Docker Compose configuration
          
          echo "Production deployment completed successfully"

      - name: Post-deployment verification
        run: |
          echo "Running post-deployment health checks..."
          # Add health check commands here
          echo "Health checks completed successfully"