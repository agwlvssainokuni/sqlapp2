#
# Copyright 2025 agwlvssainokuni
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9:00 UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '18'

jobs:
  # Check for Gradle dependency updates
  gradle-updates:
    name: Check Gradle Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Check for dependency updates
        run: ./gradlew dependencyUpdates --no-daemon

      - name: Upload dependency update report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gradle-dependency-updates
          path: build/dependencyUpdates/
          retention-days: 30

  # Check for npm dependency updates
  npm-updates:
    name: Check npm Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Check for outdated packages
        working-directory: frontend
        run: npm outdated --json > npm-outdated.json || true

      - name: Upload npm update report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-dependency-updates
          path: frontend/npm-outdated.json
          retention-days: 30

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run OWASP dependency check
        run: ./gradlew dependencyCheckAnalyze --no-daemon
        continue-on-error: true

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run npm audit
        working-directory: frontend
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Upload security audit reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-reports
          path: |
            build/reports/
            frontend/npm-audit.json
          retention-days: 90

  # Create issue for updates if needed
  create-update-issue:
    name: Create Update Issue
    runs-on: ubuntu-latest
    needs: [gradle-updates, npm-updates, security-audit]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all reports
        uses: actions/download-artifact@v4
        with:
          path: reports/

      - name: Create or update dependency update issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Check if reports exist and have content
            let hasUpdates = false;
            let issueBody = '## ðŸ”„ Dependency Update Report\n\n';
            issueBody += `**Generated on:** ${new Date().toISOString()}\n\n`;
            
            // Check Gradle updates
            try {
              const gradleReportPath = 'reports/gradle-dependency-updates/report.txt';
              if (fs.existsSync(gradleReportPath)) {
                const gradleReport = fs.readFileSync(gradleReportPath, 'utf8');
                if (gradleReport.includes('outdated dependencies')) {
                  hasUpdates = true;
                  issueBody += '### ðŸ“¦ Gradle Dependencies\n\n';
                  issueBody += '```\n' + gradleReport + '\n```\n\n';
                }
              }
            } catch (e) {
              console.log('No Gradle update report found');
            }
            
            // Check npm updates
            try {
              const npmReportPath = 'reports/npm-dependency-updates/npm-outdated.json';
              if (fs.existsSync(npmReportPath)) {
                const npmReport = fs.readFileSync(npmReportPath, 'utf8');
                const outdated = JSON.parse(npmReport || '{}');
                if (Object.keys(outdated).length > 0) {
                  hasUpdates = true;
                  issueBody += '### ðŸ“¦ npm Dependencies\n\n';
                  issueBody += '```json\n' + JSON.stringify(outdated, null, 2) + '\n```\n\n';
                }
              }
            } catch (e) {
              console.log('No npm update report found');
            }
            
            // Add security audit results
            issueBody += '### ðŸ”’ Security Audit\n\n';
            issueBody += 'Security audit completed. Check the action logs for detailed results.\n\n';
            
            issueBody += '### ðŸ“‹ Action Items\n\n';
            issueBody += '- [ ] Review outdated dependencies\n';
            issueBody += '- [ ] Update dependencies with available patches\n';
            issueBody += '- [ ] Test updated dependencies\n';
            issueBody += '- [ ] Address any security vulnerabilities\n';
            
            if (hasUpdates) {
              // Search for existing dependency update issue
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: 'dependencies',
                state: 'open'
              });
              
              const existingIssue = issues.find(issue => 
                issue.title.includes('Dependency Update Report')
              );
              
              if (existingIssue) {
                // Update existing issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: issueBody
                });
                console.log(`Updated existing issue #${existingIssue.number}`);
              } else {
                // Create new issue
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: 'ðŸ”„ Dependency Update Report',
                  body: issueBody,
                  labels: ['dependencies', 'maintenance']
                });
                console.log('Created new dependency update issue');
              }
            } else {
              console.log('No dependency updates found');
            }