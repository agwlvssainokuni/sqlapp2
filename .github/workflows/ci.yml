#
# Copyright 2025 agwlvssainokuni
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'hotfix/**'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '22'
  GRADLE_VERSION: '9.0.0'

jobs:
  # Backend testing and analysis
  backend-test:
    name: Backend Tests & Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run unit tests
        run: ./gradlew test -Pfrontend=no --no-daemon --parallel
        env:
          GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx2g -Dorg.gradle.daemon=false"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            build/test-results/
            build/reports/tests/
          retention-days: 30

  # Frontend testing and build
  frontend-test:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend linting
        working-directory: frontend
        run: npm run lint

      - name: Run frontend type checking
        working-directory: frontend
        run: npm run type-check

      - name: Run frontend tests
        working-directory: frontend
        run: npm run test
        env:
          CI: true

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 7

  # Full application build and packaging
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [ backend-test, frontend-test ]
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build application
        run: ./gradlew assemble --no-daemon
        env:
          GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx2g -Dorg.gradle.daemon=false"

      - name: Upload WAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: sqlapp2-war
          path: build/libs/*.war
          retention-days: 30

      - name: Upload build reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-reports
          path: build/reports/
          retention-days: 7

  # Docker image build and security scan
  docker-build:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [ build ]
    if: github.event_name != 'pull_request' || github.base_ref == 'main'
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download WAR artifact
        uses: actions/download-artifact@v4
        with:
          name: sqlapp2-war
          path: build/libs/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Container Image Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value={{ commit_date 'YYYYMMDD-HHmmss' tz='Asia/Tokyo' }},priority=100
            type=raw,value=${{ github.sha }},priority=200

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

#      - name: Run Trivy vulnerability scanner
#        uses: aquasecurity/trivy-action@master
#        with:
#          image-ref: 'sqlapp2:${{ github.sha }}'
#          format: 'sarif'
#          output: 'trivy-results.sarif'
#        continue-on-error: true
#
#      - name: Upload Trivy scan results
#        uses: github/codeql-action/upload-sarif@v3
#        if: always()
#        with:
#          sarif_file: 'trivy-results.sarif'

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [ build, docker-build ]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download WAR artifact
        uses: actions/download-artifact@v4
        with:
          name: sqlapp2-war
          path: artifacts/

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "WAR file: $(ls artifacts/*.war)"
          # Add actual deployment commands here
          echo "Deployment to staging completed"

  # Deploy to production environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [ build, docker-build ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download WAR artifact
        uses: actions/download-artifact@v4
        with:
          name: sqlapp2-war
          path: artifacts/

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "WAR file: $(ls artifacts/*.war)"
          # Add actual deployment commands here
          echo "Deployment to production completed"

      - name: Health check
        run: |
          echo "Running post-deployment health checks..."
          # Add health check commands here
          echo "Health checks completed"
